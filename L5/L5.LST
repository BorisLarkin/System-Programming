Turbo Assembler	 Version 3.1	    04/08/24 22:10:51	    Page 1
l5.asm



      1	0000			     MYCODE SEGMENT 'CODE'
      2				     ;ЛР#5 2024	ЛАРКИН ИУ5-41Б Вар#11
      3				     ASSUME CS:MYCODE, DS:DTSEG, SS:STSEG
      4
      5				     ;ПЕРЕВОД СИМВОЛА В	HEX из AL
      6	0000			     HEX PROC
      7	0000  BF 0000r			 LEA DI, String
      8	0003  BB 000Dr			 MOV BX, OFFSET	hext
      9	0006  50			 PUSH AX
     10	0007  D0 E8 D0 E8 D0 E8	D0+	 SHR AL, 4
     11	      E8
     12	000F  D7			 XLAT
     13	0010  AA			 STOSB
     14	0011  58			 POP AX
     15	0012  50			 PUSH AX
     16	0013  24 0F			 AND AL, 00001111b
     17	0015  D7			 XLAT
     18	0016  AA			 STOSB
     19	0017  58			 POP AX
     20	0018  B8 0068			 MOV AX, 'h'
     21	001B  AB			 STOSW
     22	001C  B4 09			 MOV AH, 09h
     23	001E  BA 0000r			 LEA DX, STRING
     24	0021  C3			 RET
     25	0022			     HEX ENDP
     26
     27	0022			     CLSSCR PROC
     28	0022  53			  PUSH BX
     29	0023  51			  PUSH CX
     30	0024  50			  PUSH AX
     31	0025  B8 0600			  MOV	AX,0600H   ;Запрос на очистку экрана.
     32	0028  B7 07			  MOV	BH,07	   ;Нормальный атрибут (черно/белый).
     33	002A  B9 0000			  MOV	CX,0000	   ;Верхняя левая позиция.
     34	002D  BA 184F			  MOV	DX,184FH   ;Нижняя правая позиция.
     35	0030  CD 10			  INT	10H	   ;Передача управления	в BIOS.
     36	0032  58			  POP AX
     37	0033  59			  POP CX
     38	0034  5B			  POP BX
     39	0035  C3			  RET
     40	0036			     CLSSCR ENDP
     41
     42	0036			     PUTCH PROC
     43	0036  B4 02			 MOV AH, 02H
     44	0038  CD 21			 INT 21H
     45	003A  C3			 RET
     46	003B			     PUTCH ENDP
     47
     48	003B			     CLRF PROC
     49	003B  B2 0A			 MOV DL, 10
     50	003D  E8 FFF6			 CALL PUTCH
     51	0040  B2 0D			 MOV DL, 13
     52	0042  E8 FFF1			 CALL PUTCH
     53	0045  C3			 RET
     54	0046			     CLRF ENDP
     55
     56				     ;Возвращает по адресу DS:DX буффер	строки
     57	0046			     GETSTRING PROC
Turbo Assembler	 Version 3.1	    04/08/24 22:10:51	    Page 2
l5.asm



     58	0046  B4 0A			 mov ah, 0AH ; Буфферный ввод строки
     59	0048  A0 001Er			 mov al, bufferSize
     60	004B  A2 0020r			 MOV [buffer], al
     61	004E  C6 06 0022r 00 90		 mov byte[buffer+1],0
     62	0054  BA 0020r			 LEA DX, buffer	;DS:DX указывает на буффер строки
     63	0057  CD 21			 int 21H
     64	0059  8A 1E 0021r		 MOV bl, buffer[1] ; Число считанных символов
     65	005D  88 1E 001Fr		 MOV inputLength, bl
     66	0061  80 06 001Fr 01		 add inputLength, 1 ;Учитываем +'$'
     67	0066  8B F2			 mov SI, OFFSET	DX
     68	0068  83 C6 02			 add SI, 2 ; Указываем на Реальное начало строки, введенной в буффер
     69	006B  A0 001Fr			 MOV AL, inputLength ;загружаем	число в	AL
     70	006E  98			 CBW ;Преобразуем в двухбайтовый тип
     71	006F  03 F0			 add SI, AX ; SI Указывает на байт за концом строки
     72	0071  BE 0024			 mov SI,'$' ;Завершение	строки
     73	0074  C3			 RET
     74	0075			     GETSTRING ENDP
     75
     76	0075			     MAIN PROC
     77				     ; Загрузка	сегментного регистра данных DS
     78	0075  B8 0000s			 MOV AX, DTSEG
     79	0078  8E D8			 MOV DS, AX
     80	007A  B8 0000s			 MOV AX, STSEG
     81	007D  8E D8			 MOV DS, AX
     82	007F  1E			 PUSH DS
     83	0080  07			 POP ES
     84	0081  06			 PUSH ES
     85	0082  5B			 POP BX
     86	0083  53			 PUSH BX
     87	0084  59			 POP CX
     88	0085  51			 PUSH CX
     89	0086  5A			 POP DX
     90				     ; Вывод символов на экран
     91	0087				 loopmain:
     92	0087  E8 FF98			     CALL CLSSCR
     93	008A  E8 FFB9			     CALL GETSTRING
     94	008D  8A 1E 0022r		     MOV BL, buffer[2]
     95	0091  3A 1E 011Fr		     CMP BL, BREAK_SYMBOL ;первый символ ввода с '*'
     96	0095  74 22			     JZ	term
     97	0097  A0 001Fr			     MOV AL, inputLength
     98	009A  98			     CBW
     99	009B  8B C8			     MOV CX, AX	;Число символов
    100	009D  BE 0020r			     lea SI, buffer
    101	00A0  83 C6 02			     ADD SI, 2
    102	00A3				     loopstr:
    103	00A3  E8 FF95				 CALL CLRF
    104	00A6  8A 04				 MOV AL, [SI]
    105	00A8  E8 FF55				 CALL HEX
    106	00AB  CD 21				 INT 21H
    107	00AD  B2 20				 MOV DL, ' '
    108	00AF  E8 FF84				 CALL PUTCH
    109	00B2  83 C6 01				 ADD SI, 1
    110	00B5  E2 EC			     loop loopstr
    111	00B7  E2 CE			 loop loopmain
    112	00B9			     ENDP MAIN
    113				     ; Выход из	программы
    114	00B9			     term:
Turbo Assembler	 Version 3.1	    04/08/24 22:10:51	    Page 3
l5.asm



    115					  ;Выход с кодом 0
    116	00B9  B0 00			  MOV AL, 0
    117	00BB  B4 4C			  MOV AH, 4CH
    118	00BD  CD 21			  INT 21H
    119	00BF			     MYCODE ENDS
    120
    121	0000			     STSEG SEGMENT stack 'stack'
    122	0000  FF*(0000)			 dw 255	dup (0)
    123	01FE			     STSEG ENDS
    124
    125	0000			     DTSEG SEGMENT 'DATA'
    126	0000  20 20 20 20 20 20	20+	 String	db '	       $',0
    127	      20 20 20 20 24 00
    128	000D  30 31 32 33 34 35	36+	 hext DB '0123456789ABCDEF'
    129	      37 38 39 41 42 43	44+
    130	      45 46
    131	001D  80			 LET DB	'А'
    132	001E  FF			 bufferSize  db	255
    133	001F  FF			 inputLength db	255   ;	number of read characters
    134	0020  FF*(24)			 buffer	db 255 DUP('$')	; actual buffer
    135	011F  2A			 BREAK_SYMBOL DB '*'	 ;Символ, по которому будет производится выход
    136	0120			     DTSEG ENDS
    137
    138				     END MAIN
Turbo Assembler	 Version 3.1	    04/08/24 22:10:51	    Page 4
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "04/08/24"
??FILENAME		Text   "l5	"
??TIME			Text   "22:10:51"
??VERSION		Number 030A
@CPU			Text   0101H
@CURSEG			Text   DTSEG			   #1  #121  #125
@FILENAME		Text   L5
@WORDSIZE		Text   2			   #1  #121  #125
BREAK_SYMBOL		Byte   DTSEG:011F		   95  #135
BUFFER			Byte   DTSEG:0020		   60  61  62  64  94  100  #134
BUFFERSIZE		Byte   DTSEG:001E		   59  #132
CLRF			Near   MYCODE:003B		   #48	103
CLSSCR			Near   MYCODE:0022		   #27	92
GETSTRING		Near   MYCODE:0046		   #57	93
HEX			Near   MYCODE:0000		   #6  105
HEXT			Byte   DTSEG:000D		   8  #128
INPUTLENGTH		Byte   DTSEG:001F		   65  66  69  97  #133
LET			Byte   DTSEG:001D		   #131
LOOPMAIN		Near   MYCODE:0087		   #91	111
LOOPSTR			Near   MYCODE:00A3		   #102	 110
MAIN			Near   MYCODE:0075		   #76	138
PUTCH			Near   MYCODE:0036		   #42	50  52	108
STRING			Byte   DTSEG:0000		   7  23  #126
TERM			Near   MYCODE:00B9		   96  #114

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DTSEG			16  0120 Para	none	DATA	   3  78  #125
MYCODE			16  00BF Para	none	CODE	   #1  3
STSEG			16  01FE Para	Stack	STACK	   3  80  #121
