Turbo Assembler	 Version 3.1	    04/07/24 20:48:22	    Page 1
l5.asm



      1	0000			     MYCODE SEGMENT 'CODE'
      2				     ;ЛР#5 2024	ЛАРКИН ИУ5-41Б Вар#11
      3				     ASSUME CS:MYCODE, DS:DTSEG, SS:STSEG
      4
      5				     ;ПЕРЕВОД СИМВОЛА В	HEX из AL
      6	0000			     HEX PROC
      7	0000  BF 0000r			 LEA DI, String
      8	0003  BB 000Dr			 MOV BX, OFFSET	hext
      9	0006  50			 PUSH AX
     10	0007  D0 E8 D0 E8 D0 E8	D0+	 SHR AL, 4
     11	      E8
     12	000F  D7			 XLAT
     13	0010  AA			 STOSB
     14	0011  58			 POP AX
     15	0012  50			 PUSH AX
     16	0013  24 0F			 AND AL, 00001111b
     17	0015  D7			 XLAT
     18	0016  AA			 STOSB
     19	0017  58			 POP AX
     20	0018  B8 0068			 MOV AX, 'h'
     21	001B  AB			 STOSW
     22	001C  B4 09			 MOV AH, 09h
     23	001E  BA 0000r			 LEA DX, STRING
     24	0021  C3			 RET
     25	0022			     HEX ENDP
     26
     27	0022			     CLSSCR PROC
     28	0022  53			  PUSH BX
     29	0023  51			  PUSH CX
     30	0024  50			  PUSH AX
     31	0025  B8 0600			  MOV	AX,0600H   ;Запрос на очистку экрана.
     32	0028  B7 07			  MOV	BH,07	   ;Нормальный атрибут (черно/белый).
     33	002A  B9 0000			  MOV	CX,0000	   ;Верхняя левая позиция.
     34	002D  BA 184F			  MOV	DX,184FH   ;Нижняя правая позиция.
     35	0030  CD 10			  INT	10H	   ;Передача управления	в BIOS.
     36	0032  58			  POP AX
     37	0033  59			  POP CX
     38	0034  5B			  POP BX
     39	0035  C3			  RET
     40	0036			     CLSSCR ENDP
     41
     42	0036			     PUTCH PROC
     43	0036  B4 02			 MOV AH, 02H
     44	0038  CD 21			 INT 21H
     45	003A  C3			 RET
     46	003B			     PUTCH ENDP
     47
     48	003B			     CLRF PROC
     49	003B  B2 0A			 MOV DL, 10
     50	003D  E8 FFF6			 CALL PUTCH
     51	0040  B2 0D			 MOV DL, 13
     52	0042  E8 FFF1			 CALL PUTCH
     53	0045  C3			 RET
     54	0046			     CLRF ENDP
     55
     56				     ;Возвращает по адресу DS:DX буффер	строки
     57	0046			     GETSTRING PROC
Turbo Assembler	 Version 3.1	    04/07/24 20:48:22	    Page 2
l5.asm



     58	0046  B4 0A			 mov ah, 0AH ; Буфферный ввод строки
     59	0048  BA 0020r			 lea DX, buffer	;DS:DX указывает на буффер строки
     60	004B  CD 21			 int 21H
     61	004D  8A 1E 0021r		 MOV bl, buffer[1] ; Число считанных символов
     62	0051  88 1E 001Fr		 MOV inputLength, bl
     63	0055  80 06 001Fr 01		 add inputLength, 1 ;Учитываем +'$'
     64	005A  8B F2			 mov SI, OFFSET	DX
     65	005C  83 C6 02			 add SI, 2 ; Указываем на Реальное начало строки, введенной в буффер
     66	005F  A0 001Fr			 MOV AL, inputLength ;загружаем	число в	AL
     67	0062  98			 CBW ;Преобразуем в двухбайтовый тип
     68	0063  03 F0			 add SI, AX ; SI Указывает на байт за концом строки
     69	0065  BE 0024			 mov SI,'$' ;Завершение	строки
     70	0068			     GETSTRING ENDP
     71
     72	0068			     MAIN PROC
     73				     ; Загрузка	сегментного регистра данных DS
     74	0068  B8 0000s			 MOV AX, DTSEG
     75	006B  8E D8			 MOV DS, AX
     76	006D  B8 0000s			 MOV AX, STSEG
     77	0070  8E D8			 MOV DS, AX
     78	0072  1E			 PUSH DS
     79	0073  07			 POP ES
     80				     ; Вывод символов на экран
     81	0074				 loopmain:
     82	0074  E8 FFAB			     CALL CLSSCR
     83	0077  E8 FFCC			     CALL GETSTRING
     84	007A  8A 1E 0022r		     MOV BL, buffer[2]
     85	007E  3A 1E 011Fr		     CMP BL, BREAK_SYMBOL ;первый символ ввода с '*'
     86	0082  74 1F			     JZ	term
     87	0084  A0 001Fr			     MOV AL, inputLength
     88	0087  98			     CBW
     89	0088  8B C8			     MOV CX, AX	;Число символов
     90	008A  BE 0020r			     lea SI, buffer
     91	008D  83 C6 02			     ADD SI, 2
     92	0090				     loopstr:
     93	0090  8A 04				 MOV AL, [SI]
     94	0092  E8 FF6B				 CALL HEX
     95	0095  CD 21				 INT 21H
     96	0097  B2 20				 MOV DL, ' '
     97	0099  E8 FF9A				 CALL PUTCH
     98	009C  83 C6 01				 ADD SI, 1
     99	009F  E2 EF			     loop loopstr
    100	00A1  E2 D1			 loop loopmain
    101	00A3			     ENDP MAIN
    102				     ; Выход из	программы
    103	00A3			     term:
    104					  ;Выход с кодом 5
    105	00A3  B0 05			  MOV AL, 5
    106	00A5  B4 4C			  MOV AH, 4CH
    107	00A7  CD 21			  INT 21H
    108	00A9			     MYCODE ENDS
    109
    110	0000			     STSEG SEGMENT stack 'stack'
    111	0000  FF*(0000)			 dw 255	dup (0)
    112	01FE			     STSEG ENDS
    113
    114	0000			     DTSEG SEGMENT 'DATA'
Turbo Assembler	 Version 3.1	    04/07/24 20:48:22	    Page 3
l5.asm



    115	0000  20 20 20 20 20 20	20+	 String	db '	       $',0
    116	      20 20 20 20 24 00
    117	000D  30 31 32 33 34 35	36+	 hext DB '0123456789ABCDEF'
    118	      37 38 39 41 42 43	44+
    119	      45 46
    120	001D  80			 LET DB	'А'
    121	001E  FF			 bufferSIze  db	255  ; 20 char + RETURN
    122	001F  FF			 inputLength db	255   ;	number of read characters
    123	0020  FF*(24)			 buffer	db 255 DUP('$')	; actual buffer
    124	011F  2A			 BREAK_SYMBOL DB '*'	 ;Символ, по которому будет производится выход
    125	0120			     DTSEG ENDS
    126
    127				     END MAIN
Turbo Assembler	 Version 3.1	    04/07/24 20:48:22	    Page 4
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "04/07/24"
??FILENAME		Text   "l5	"
??TIME			Text   "20:48:22"
??VERSION		Number 030A
@CPU			Text   0101H
@CURSEG			Text   DTSEG			   #1  #110  #114
@FILENAME		Text   L5
@WORDSIZE		Text   2			   #1  #110  #114
BREAK_SYMBOL		Byte   DTSEG:011F		   85  #124
BUFFER			Byte   DTSEG:0020		   59  61  84  90  #123
BUFFERSIZE		Byte   DTSEG:001E		   #121
CLRF			Near   MYCODE:003B		   #48
CLSSCR			Near   MYCODE:0022		   #27	82
GETSTRING		Near   MYCODE:0046		   #57	83
HEX			Near   MYCODE:0000		   #6  94
HEXT			Byte   DTSEG:000D		   8  #117
INPUTLENGTH		Byte   DTSEG:001F		   62  63  66  87  #122
LET			Byte   DTSEG:001D		   #120
LOOPMAIN		Near   MYCODE:0074		   #81	100
LOOPSTR			Near   MYCODE:0090		   #92	99
MAIN			Near   MYCODE:0068		   #72	127
PUTCH			Near   MYCODE:0036		   #42	50  52	97
STRING			Byte   DTSEG:0000		   7  23  #115
TERM			Near   MYCODE:00A3		   86  #103

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DTSEG			16  0120 Para	none	DATA	   3  74  #114
MYCODE			16  00A9 Para	none	CODE	   #1  3
STSEG			16  01FE Para	Stack	STACK	   3  76  #110
