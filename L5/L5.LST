Turbo Assembler	 Version 3.1	    04/09/24 00:06:42	    Page 1
l5.asm



      1	0000			     MYCODE SEGMENT 'CODE'
      2				     ;ЛР#5 2024	ЛАРКИН ИУ5-41Б Вар#11
      3				     ASSUME CS:MYCODE, DS:DTSEG, SS:STSEG
      4
      5				     ;ПЕРЕВОД СИМВОЛА В	HEX из AL
      6	0000			     HEX PROC
      7	0000  BF 0000r			 LEA DI, String
      8	0003  BB 000Dr			 MOV BX, OFFSET	hext
      9	0006  50			 PUSH AX
     10	0007  D0 E8 D0 E8 D0 E8	D0+	 SHR AL, 4
     11	      E8
     12	000F  D7			 XLAT
     13	0010  AA			 STOSB
     14	0011  58			 POP AX
     15	0012  50			 PUSH AX
     16	0013  24 0F			 AND AL, 00001111b
     17	0015  D7			 XLAT
     18	0016  AA			 STOSB
     19	0017  58			 POP AX
     20	0018  B8 0068			 MOV AX, 'h'
     21	001B  AB			 STOSW
     22	001C  B4 09			 MOV AH, 09h
     23	001E  BA 0000r			 LEA DX, STRING
     24	0021  C3			 RET
     25	0022			     HEX ENDP
     26
     27	0022			     GETCH PROC
     28	0022  B4 08			MOV AH,	08H
     29	0024  CD 21			INT 21H
     30	0026  C3			RET
     31	0027			     GETCH ENDP
     32
     33	0027			     CLSSCR PROC
     34	0027  53			  PUSH BX
     35	0028  51			  PUSH CX
     36	0029  50			  PUSH AX
     37	002A  B8 0600			  MOV	AX,0600H   ;Запрос на очистку экрана.
     38	002D  B7 07			  MOV	BH,07	   ;Нормальный атрибут (черно/белый).
     39	002F  B9 0000			  MOV	CX,0000	   ;Верхняя левая позиция.
     40	0032  BA 184F			  MOV	DX,184FH   ;Нижняя правая позиция.
     41	0035  CD 10			  INT	10H	   ;Передача управления	в BIOS.
     42	0037  58			  POP AX
     43	0038  59			  POP CX
     44	0039  5B			  POP BX
     45	003A  C3			  RET
     46	003B			     CLSSCR ENDP
     47
     48	003B			     PUTCH PROC
     49	003B  B4 02			 MOV AH, 02H
     50	003D  CD 21			 INT 21H
     51	003F  C3			 RET
     52	0040			     PUTCH ENDP
     53
     54	0040			     CLRF PROC
     55	0040  B2 0A			 MOV DL, 10
     56	0042  E8 FFF6			 CALL PUTCH
     57	0045  B2 0D			 MOV DL, 13
Turbo Assembler	 Version 3.1	    04/09/24 00:06:42	    Page 2
l5.asm



     58	0047  E8 FFF1			 CALL PUTCH
     59	004A  C3			 RET
     60	004B			     CLRF ENDP
     61
     62				     ;Возвращает по адресу DS:DX буффер	строки
     63	004B			     GETSTRING PROC
     64	004B  B4 0A			 mov ah, 0AH ; Буфферный ввод строки
     65	004D  B0 80			 mov al, 128
     66	004F  A2 001Er			 MOV [buffer], al
     67	0052  C6 06 0020r 00 90		 mov byte[buffer+1], 0
     68	0058  BA 001Er			 LEA DX, buffer	;DS:DX указывает на буффер строки
     69	005B  CD 21			 int 21H
     70	005D  8A 1E 001Fr		 MOV bl, buffer[1] ; Число считанных символов
     71	0061  88 1E 001Dr		 MOV inputLength, bl
     72	0065  80 06 001Dr 01		 add inputLength, 1 ;Учитываем +'$'
     73	006A  8B F2			 mov SI, OFFSET	DX
     74	006C  83 C6 02			 add SI, 2 ; Указываем на Реальное начало строки, введенной в буффер
     75	006F  A0 001Dr			 MOV AL, inputLength ;загружаем	число в	AL
     76	0072  98			 CBW ;Преобразуем в двухбайтовый тип
     77	0073  03 F0			 add SI, AX ; SI Указывает на байт за концом строки
     78	0075  BE 0024			 mov SI,'$' ;Завершение	строки
     79	0078  C3			 RET
     80	0079			     GETSTRING ENDP
     81
     82	0079			     MAIN PROC
     83				     ; Загрузка	сегментного регистра данных DS
     84	0079  B8 0000s			 MOV AX, DTSEG
     85	007C  8E D8			 MOV DS, AX
     86	007E  B8 0000s			 MOV AX, STSEG
     87	0081  8E D8			 MOV DS, AX
     88	0083  1E			 PUSH DS
     89	0084  07			 POP ES
     90	0085  06			 PUSH ES
     91	0086  5B			 POP BX
     92	0087  53			 PUSH BX
     93	0088  59			 POP CX
     94	0089  51			 PUSH CX
     95	008A  5A			 POP DX
     96				     ; Вывод символов на экран
     97	008B				 loopmain:
     98	008B  E8 FF99			     CALL CLSSCR
     99	008E  E8 FFBA			     CALL GETSTRING
    100	0091  8A 1E 0020r		     MOV BL, buffer[2]
    101	0095  3A 1E 00E8r		     CMP BL, BREAK_SYMBOL ;первый символ ввода с '*'
    102	0099  74 23			     JZ	term
    103	009B  A0 001Dr			     MOV AL, inputLength
    104	009E  98			     CBW
    105	009F  8B C8			     MOV CX, AX	;Число символов
    106	00A1  BE 001Er			     lea SI, buffer
    107	00A4  83 C6 01			     ADD SI, 1
    108	00A7				     loopstr:
    109						 ;MOV AL, [SI]
    110						 ;CALL HEX
    111						 ;INT 21H
    112						 ;MOV DL, ' '
    113	00A7  8A 14				 MOV DL, [SI]
    114	00A9  E8 FF8F				 CALL PUTCH
Turbo Assembler	 Version 3.1	    04/09/24 00:06:42	    Page 3
l5.asm



    115	00AC  B2 20				 MOV DL, ' '
    116	00AE  E8 FF8A				 CALL PUTCH
    117	00B1  83 C6 01				 ADD SI, 1
    118	00B4  E2 F1			     loop loopstr
    119	00B6  E8 FF69			     CALL GETCH
    120	00B9  E8 FF84			     CALL CLRF
    121	00BC  E2 CD			 loop loopmain
    122	00BE			     ENDP MAIN
    123				     ; Выход из	программы
    124	00BE			     term:
    125					  ;Выход с кодом 0
    126	00BE  B0 00			  MOV AL, 0
    127	00C0  B4 4C			  MOV AH, 4CH
    128	00C2  CD 21			  INT 21H
    129	00C4			     MYCODE ENDS
    130
    131	0000			     STSEG SEGMENT stack 'stack'
    132	0000  80*(0000)			 dw 128	dup (0)
    133	0100			     STSEG ENDS
    134
    135	0000			     DTSEG SEGMENT 'DATA'
    136	0000  20 20 20 20 20 20	20+	 String	db '	       $',0
    137	      20 20 20 20 24 00
    138	000D  30 31 32 33 34 35	36+	 hext DB '0123456789ABCDEF'
    139	      37 38 39 41 42 43	44+
    140	      45 46
    141	001D  7D			 inputLength db	125  ; number of read characters
    142	001E  80 C8*(30) 24		 buffer	db 128,	200 DUP('0'), '$' ; actual buffer
    143	00E8  2A			 BREAK_SYMBOL DB '*'	 ;Символ, по которому будет производится выход
    144	00E9			     DTSEG ENDS
    145
    146				     END MAIN
Turbo Assembler	 Version 3.1	    04/09/24 00:06:42	    Page 4
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "04/09/24"
??FILENAME		Text   "l5	"
??TIME			Text   "00:06:42"
??VERSION		Number 030A
@CPU			Text   0101H
@CURSEG			Text   DTSEG			   #1  #131  #135
@FILENAME		Text   L5
@WORDSIZE		Text   2			   #1  #131  #135
BREAK_SYMBOL		Byte   DTSEG:00E8		   101	#143
BUFFER			Byte   DTSEG:001E		   66  67  68  70  100	106  #142
CLRF			Near   MYCODE:0040		   #54	120
CLSSCR			Near   MYCODE:0027		   #33	98
GETCH			Near   MYCODE:0022		   #27	119
GETSTRING		Near   MYCODE:004B		   #63	99
HEX			Near   MYCODE:0000		   #6
HEXT			Byte   DTSEG:000D		   8  #138
INPUTLENGTH		Byte   DTSEG:001D		   71  72  75  103  #141
LOOPMAIN		Near   MYCODE:008B		   #97	121
LOOPSTR			Near   MYCODE:00A7		   #108	 118
MAIN			Near   MYCODE:0079		   #82	146
PUTCH			Near   MYCODE:003B		   #48	56  58	114  116
STRING			Byte   DTSEG:0000		   7  23  #136
TERM			Near   MYCODE:00BE		   102	#124

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DTSEG			16  00E9 Para	none	DATA	   3  84  #135
MYCODE			16  00C4 Para	none	CODE	   #1  3
STSEG			16  0100 Para	Stack	STACK	   3  86  #131
