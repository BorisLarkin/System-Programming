Turbo Assembler	 Version 3.1	    04/07/24 15:53:12	    Page 1
L5.asm



      1	0000			     MYCODE SEGMENT 'CODE'
      2				     ;ЛР#5 2024	ЛАРКИН ИУ5-41Б Вар#11
      3				     ASSUME CS:MYCODE, DS:DTSEG, SS:STSEG
      4
      5				     ;ПЕРЕВОД СИМВОЛА В	HEX из AL
      6	0000			     HEX PROC
      7	0000  BF 0000r			 LEA DI, String
      8	0003  BB 000Dr			 MOV BX, OFFSET	hext
      9	0006  50			 PUSH AX
     10	0007  D0 E8 D0 E8 D0 E8	D0+	 SHR AL, 4
     11	      E8
     12	000F  D7			 XLAT
     13	0010  AA			 STOSB
     14	0011  58			 POP AX
     15	0012  50			 PUSH AX
     16	0013  24 0F			 AND AL, 00001111b
     17	0015  D7			 XLAT
     18	0016  AA			 STOSB
     19	0017  58			 POP AX
     20	0018  B8 0068			 MOV AX, 'h'
     21	001B  AB			 STOSW
     22	001C  B4 09			 MOV AH, 09h
     23	001E  BA 0000r			 LEA DX, STRING
     24	0021  C3			 RET
     25	0022			     HEX ENDP
     26
     27	0022			     CLSSCR PROC
     28	0022  53			  PUSH BX
     29	0023  51			  PUSH CX
     30	0024  50			  PUSH AX
     31	0025  B8 0600			  MOV	AX,0600H   ;Запрос на очистку экрана.
     32	0028  B7 07			  MOV	BH,07	   ;Нормальный атрибут (черно/белый).
     33	002A  B9 0000			  MOV	CX,0000	   ;Верхняя левая позиция.
     34	002D  BA 184F			  MOV	DX,184FH   ;Нижняя правая позиция.
     35	0030  CD 10			  INT	10H	   ;Передача управления	в BIOS.
     36	0032  58			  POP AX
     37	0033  59			  POP CX
     38	0034  5B			  POP BX
     39	0035  C3			  RET
     40	0036			     CLSSCR ENDP
     41
     42	0036			     PUTCH PROC
     43	0036  B4 02			 MOV AH, 02H
     44	0038  CD 21			 INT 21H
     45	003A  C3			 RET
     46	003B			     PUTCH ENDP
     47
     48	003B			     CLRF PROC
     49	003B  B2 0A			 MOV DL, 10
     50	003D  E8 FFF6			 CALL PUTCH
     51	0040  B2 0D			 MOV DL, 13
     52	0042  E8 FFF1			 CALL PUTCH
     53	0045  C3			 RET
     54	0046			     CLRF ENDP
     55
     56				     ;Возвращает по адресу ds:DX буффер	строки,	в AH - длину
     57	0046			     GETSTRING PROC
Turbo Assembler	 Version 3.1	    04/07/24 15:53:12	    Page 2
L5.asm



     58	0046  B4 0A			 mov ah, 0AH ; Буфферный ввод строки
     59	0048  BA 0020r			 lea DX, buffer	;ds:DX указывает на буффер строки
     60	004B  CD 21			 int 21H
     61	004D  8B F2			 mov SI, OFFSET	DX
     62	004F  83 C6 01			 add SI, 1 ; Указываем на число	символов, введенных в буффер
     63	0052  8B 44 01			 MOV AX, BYTE [SI]
     64	0055  A3 001Fr			 MOV inputLength, AX ; Число считанных символов
**Error** L5.asm(63) Operand types do not match
     65	0058  80 06 001Fr 01		 add inputLength, 1 ;Учитываем +'$'
     66	005D  83 C2 02			 add DX, 2 ; Реальное начало строки
     67	0060  8B F2			 mov SI, OFFSET	DX
     68	0062  03 36 001Fr		 add SI, inputLength ; SI Указывает на байт за концом строки
**Error** L5.asm(67) Operand types do not match
     69	0066  BE 0024			 mov SI,'$' ;Завершение	строки
     70	0069			     GETSTRING ENDP
     71
     72	0069			     MAIN PROC
     73				     ; Загрузка	сегментного регистра данных DS
     74	0069  B8 0000s			 MOV AX, DTSEG
     75	006C  8E D8			 MOV DS, AX
     76	006E  B8 0000s			 MOV AX, STSEG
     77	0071  8E D8			 MOV DS, AX
     78	0073  1E			 PUSH DS
     79	0074  07			 POP ES
     80				     ; Вывод символов на экран
     81	0075				 loopmain:
     82	0075  E8 FFAA			     CALL CLSSCR
     83	0078  E8 FFCB			     CALL GETSTRING
     84	007B  38 06 0020r 90 90		     CMP [buffer], BREAK_SYMBOL
**Error** L5.asm(83) Illegal memory reference
     85	0081  74 16			     JZ	term
     86	0083  8B 0E 001Fr		     MOV CX, inputLength ;Число	символов
**Error** L5.asm(85) Operand types do not match
     87	0087				     loopstr:
     88	0087  8A 90 90 90			 MOV AL, byte [SI + inputLength	- CX]
**Error** L5.asm(87) Illegal indexing mode
     89	008B  E8 FF72				 CALL HEX
     90	008E  CD 21				 INT 21H
     91	0090  B2 20				 MOV DL, ' '
     92	0092  E8 FFA1				 CALL PUTCH
     93	0095  E2 F0			     loop loopstr
     94	0097  E2 DC			 loop loopmain
     95	0099			     ENDP MAIN
     96				     ; Выход из	программы
     97	0099			     term:
     98					  ;Выход с кодом 5
     99	0099  B0 05			  MOV AL, 5
    100	009B  B4 4C			  MOV AH, 4CH
    101	009D  CD 21			  INT 21H
    102	009F			     MYCODE ENDS
    103
    104	0000			     STSEG SEGMENT stack 'stack'
    105	0000  FF*(0000)			 dw 255	dup (0)
    106	01FE			     STSEG ENDS
    107
    108	0000			     DTSEG SEGMENT 'DATA'
    109	0000  20 20 20 20 20 20	20+	 String	db '	       $',0
Turbo Assembler	 Version 3.1	    04/07/24 15:53:12	    Page 3
L5.asm



    110	      20 20 20 20 24 00
    111	000D  30 31 32 33 34 35	36+	 hext DB '0123456789ABCDEF'
    112	      37 38 39 41 42 43	44+
    113	      45 46
    114	001D  80			 LET DB	'А'
    115	001E  FF			 bufferSIze  db	255  ; 20 char + RETURN
    116	001F  00			 inputLength db	0   ; number of	read characters
    117	0020  FF*(24)			 buffer	db 255 DUP('$')	; actual buffer
    118	011F  2A			 BREAK_SYMBOL DB '*'	 ;Символ, по которому будет производится выход
    119	0120  FF*(0120r)		 dw 255	dup ($)
    120	031E			     DTSEG ENDS
    121
    122				     END MAIN
Turbo Assembler	 Version 3.1	    04/07/24 15:53:12	    Page 4
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "04/07/24"
??FILENAME		Text   "L5	"
??TIME			Text   "15:53:12"
??VERSION		Number 030A
@CPU			Text   0101H
@CURSEG			Text   DTSEG			   #1  #104  #108
@FILENAME		Text   L5
@WORDSIZE		Text   2			   #1  #104  #108
BREAK_SYMBOL		Byte   DTSEG:011F		   84  #118
BUFFER			Byte   DTSEG:0020		   59  84  #117
BUFFERSIZE		Byte   DTSEG:001E		   #115
CLRF			Near   MYCODE:003B		   #48
CLSSCR			Near   MYCODE:0022		   #27	82
GETSTRING		Near   MYCODE:0046		   #57	83
HEX			Near   MYCODE:0000		   #6  89
HEXT			Byte   DTSEG:000D		   8  #111
INPUTLENGTH		Byte   DTSEG:001F		   64  65  68  86  88  #116
LET			Byte   DTSEG:001D		   #114
LOOPMAIN		Near   MYCODE:0075		   #81	94
LOOPSTR			Near   MYCODE:0087		   #87	93
MAIN			Near   MYCODE:0069		   #72	122
PUTCH			Near   MYCODE:0036		   #42	50  52	92
STRING			Byte   DTSEG:0000		   7  23  #109
TERM			Near   MYCODE:0099		   85  #97

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DTSEG			16  031E Para	none	DATA	   3  74  #108
MYCODE			16  009F Para	none	CODE	   #1  3
STSEG			16  01FE Para	Stack	STACK	   3  76  #104
Turbo Assembler	 Version 3.1	    04/07/24 15:53:12	    Page 5
Error Summary



**Error** L5.asm(63) Operand types do not match
**Error** L5.asm(67) Operand types do not match
**Error** L5.asm(83) Illegal memory reference
**Error** L5.asm(85) Operand types do not match
**Error** L5.asm(87) Illegal indexing mode
