Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 1
tsr.asm



      1				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2				     ; tsr.asm - заголовок
      3				     ;
      4				     ; Сборка:
      5				     ;	tasm.exe /l tsr.asm
      6				     ;	tlink /t /x tsr.obj
      7				     ;
      8				     ; Примечания:
      9				     ;	1) комментарии,	начинающиеся с символа @ - места, где код зависит от варианта
     10				     ;
     11				     ; Авторы:
     12				     ;	МГТУ им. Н.Э. Баумана, ИУ5-44, 2013 г.
     13				     ;	 Леонтьев А.В.
     14				     ;	 Латкин	И.И.
     15				     ;	 Назаров К.В.
     16				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     17				     ; Резидентная часть
     18	0000			     code segment    'code'
     19					     assume  CS:code, DS:code
     20					     org     100h
     21	0100				     _start:
     22
     23	0100  E9 062C			     jmp _initTSR ; на начало программы
     24
     25					     ; данные резидента
     26				      ;	Игнорирование
     27
     28	0103  41 42 43 44 45 46	47+	     ignoredChars				     DB					    +
     29	      48 49 4A 4B 4C 4D	4E+  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'  ;список игнорируемых символов
     30	      4F 50 51 52 53 54	55+
     31	      56 57 58 59 5A 61	62+
     32	      63 64 65 66 67 68	69+
     33	      6A 6B 6C 6D 6E 6F	70+
     34	      71 72 73 74 75 76	77+
     35	      78 79 7A
     36	      =0034			     ignoredLength			     equ     $-ignoredChars			    +
     37				     ; длина строки ignoredChars
     38	0137  00			     ignoreEnabled			     DB	     0					    +
     39				     ; флаг функции игнорирования ввода
     40	0138  4B 56 59 4A 47		     translateFrom			     DB	     'KVYJG'				    +
     41				     ;@	символы	для замены (ЛМНОП на англ. раскладке)
     42	013D  8B 8C 8D 8E 8F		     translateTo			     DB	     'ЛМНОП'				    +
     43				     ;@	символы	на которые будет идти замена
     44	      =0005			     translateLength			     equ     $-translateTo			    +
     45				     ; длина строки trasnlateFrom
     46	0142  00			     translateEnabled				     DB	     0				    +
     47				     ; флаг функции перевода
     48
     49	0143  00			     signaturePrintingEnabled		     DB	     0					    +
     50				     ; флаг функции вывода информации об авторе
     51	0144  00			     cursiveEnabled			     DB	     0					    +
     52				     ; флаг перевода символа в курсив
     53	0145  00			     cursiveSymbol			     DB	00000000b	   ;@ символ И,	составленный+
     54				     из	единичек (его курсивный	вариант)
     55	0146  00										     DB	00000000b
     56	0147  63										     DB	01100011b
     57	0148  67										     DB	01100111b
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 2
tsr.asm



     58	0149  67										     DB	01100111b
     59	014A  6B										     DB	01101011b
     60	014B  6B										     DB	01101011b
     61	014C  CE										     DB	11001110b
     62	014D  D6										     DB	11010110b
     63	014E  D6										     DB	11010110b
     64	014F  E6										     DB	11100110b
     65	0150  E6										     DB	11100110b
     66	0151  C6										     DB	11000110b
     67	0152  00										     DB	00000000b
     68	0153  00										     DB	00000000b
     69	0154  00										     DB	00000000b
     70
     71	0155  88			     charToCursiveIndex			     DB	'И'					    +
     72				     ;@	символ для замены
     73	0156  10*(FF)			     savedSymbol				     DB	16 dup(0FFh)
     74				     ; переменная для хранения старого символа
     75
     76	      =00FF			     true					     equ     0FFh			    +
     77				     ; константа истинности
     78	0166  ????			     old_int9hOffset				     DW	     ?				    +
     79				     ; адрес старого обработчика int 9h
     80	0168  ????			     old_int9hSegment				     DW	     ?				    +
     81				     ; сегмент старого обработчика int 9h
     82	016A  ????			     old_int1ChOffset				     DW	     ?				    +
     83				     ; адрес старого обработчика int 1Ch
     84	016C  ????			     old_int1ChSegment			     DW	     ?					    +
     85				     ; сегмент старого обработчика int 1Ch
     86	016E  ????			     old_int2FhOffset				     DW	     ?				    +
     87				     ; адрес старого обработчика int 2Fh
     88	0170  ????			     old_int2FhSegment			     DW	     ?					    +
     89				     ; сегмент старого обработчика int 2Fh
     90
     91	0172  00			     unloadTSR					     DB	     0				    +
     92				     ; 1 - выгрузить резидент
     93	0173  00			     notLoadTSR					     DB	     0				    +
     94				     ; 1 - не загружать
     95	0174  0000			     counter					     DW	     0
     96	      =0007			     printDelay					     equ     7				    +
     97				     ;@	задержка перед выводом "подписи" в секундах
     98	0176  0001			     printPos						     DW	     1			    +
     99				     ;@	положение подписи на экране. 0 - верх, 1 - центр, 2 - низ
    100
    101					     ;@	заменить на собственные	данные.	формирование таблицы идет по строке большей длины   +
    102				     (1я строка).
    103	0178  B3 8B A0 E0 AA A8	AD+	     signatureLine1			     DB	     179, 'Ларкин Борис', 179
    104	      20 81 AE E0 A8 E1	B3
    105
    106	      =000E			     Line1_length				     equ     $-signatureLine1
    107	0186  B3 88 93 35 2D 34	31+	     signatureLine2			     DB	     179, 'ИУ5-41      ', 179
    108	      20 20 20 20 20 20	B3
    109	      =000E			     Line2_length				     equ     $-signatureLine2
    110	0194  B3 82 A0 E0 A8 A0	AD+	     signatureLine3			     DB	     179, 'Вариант #11 ', 179
    111	      E2 20 23 31 31 20	B3
    112	      =000E			     Line3_length				     equ     $-signatureLine3
    113				     ; Справка
    114	01A2  3E 74 73 72 2E 63	6F+	     helpMsg DB	'>tsr.com [/?] [/u]', 10, 13
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 3
tsr.asm



    115	      6D 20 5B 2F 3F 5D	20+
    116	      5B 2F 75 5D 0A 0D
    117	01B6  20 5B 2F 3F 5D 20	2D+			     DB	' [/?] - вывод данной справки',	10, 13
    118	      20 A2 EB A2 AE A4	20+
    119	      A4 A0 AD AD AE A9	20+
    120	      E1 AF E0 A0 A2 AA	A8+
    121	      0A 0D
    122	01D4  20 5B 2F 75 5D 20	2D+			     DB	' [/u] - выгрузка резидента из памяти',	10, 13
    123	      20 A2 EB A3 E0 E3	A7+
    124	      AA A0 20 E0 A5 A7	A8+
    125	      A4 A5 AD E2 A0 20	A8+
    126	      A7 20 AF A0 AC EF	E2+
    127	      A8 0A 0D
    128	01FA  20 20 46 31 20 20	2D+			     DB	'  F1  - включение и отключения	курсивного вывода русского символа  +
    129	      20 A2 AA AB EE E7	A5+  И', 10, 13
    130	      AD A8 A5 20 A8 20	AE+
    131	      E2 AA AB EE E7 A5	AD+
    132	      A8 EF 20 AA E3 E0	E1+
    133	      A8 A2 AD AE A3 AE	20+
    134	      A2 EB A2 AE A4 A0	20+
    135	      E0 E3 E1 E1 AA AE	A3+
    136	      AE 20 E1 A8 AC A2	AE+
    137	      AB A0 20 88 0A 0D
    138	023F  20 20 46 32 20 20	2D+			     DB	'  F2  - включение и отключение	частичной русификации клавиатуры    +
    139	      20 A2 AA AB EE E7	A5+  (KVYJG -> ЛМНОП)',	10, 13
    140	      AD A8 A5 20 A8 20	AE+
    141	      E2 AA AB EE E7 A5	AD+
    142	      A8 A5 20 E7 A0 E1	E2+
    143	      A8 E7 AD AE A9 20	E0+
    144	      E3 E1 A8 E4 A8 AA	A0+
    145	      E6 A8 A8 20 AA AB	A0+
    146	      A2 A8 A0 E2 E3 E0	EB+
    147	      28 4B 56 59 4A 47	20+
    148	      2D 3E 20 8B 8C 8D	8E+
    149	      8F 29 0A 0D
    150	0290  20 20 46 33 20 20	2D+			     DB	'  F3  - включение и отключение	режима блокировки ввода	латинских   +
    151	      20 A2 AA AB EE E7	A5+  букв', 10,	13
    152	      AD A8 A5 20 A8 20	AE+
    153	      E2 AA AB EE E7 A5	AD+
    154	      A8 A5 20 E0 A5 A6	A8+
    155	      AC A0 20 A1 AB AE	AA+
    156	      A8 E0 AE A2 AA A8	20+
    157	      A2 A2 AE A4 A0 20	AB+
    158	      A0 E2 A8 AD E1 AA	A8+
    159	      E5 20 A1 E3 AA A2	0A+
    160	      0D
    161	02D7  20 20 46 39 20 20	2D+			     DB	'  F9  - вывод ФИО и группы по таймеру в центре	экрана', 10, 13
    162	      20 A2 EB A2 AE A4	20+
    163	      94 88 8E 20 A8 20	A3+
    164	      E0 E3 AF AF EB 20	AF+
    165	      AE 20 E2 A0 A9 AC	A5+
    166	      E0 E3 20 A2 20 E6	A5+
    167	      AD E2 E0 A5 20 ED	AA+
    168	      E0 A0 AD A0 0A 0D
    169
    170	      =016C			     helpMsg_length			     equ  $-helpMsg
    171	030E  8E E8 A8 A1 AA A0	20+	     errorParamMsg				     DB	     'Ошибка параметров	коммандной  +
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 4
tsr.asm



    172	      AF A0 E0 A0 AC A5	E2+  строки', 10, 13
    173	      E0 AE A2 20 AA AE	AC+
    174	      AC A0 AD A4 AD AE	A9+
    175	      20 E1 E2 E0 AE AA	A8+
    176	      0A 0D
    177	      =0025			     errorParamMsg_length		     equ     $-errorParamMsg
    178
    179	0333  DA 0C*(C4) BF		     tableTop						     DB	     218, Line1_length-2 dup+
    180				     (196), 191
    181	      =000E			     tableTop_length				     equ     $-tableTop
    182	0341  C0 0C*(C4) D9		     tableBottom				     DB	     192, Line1_length-2 dup (196), +
    183				     217
    184	      =000E			     tableBottom_length			     equ  $-tableBottom
    185
    186					     ; сообщения
    187	034F  90 A5 A7 A8 A4 A5	AD+	     installedMsg				     DB	 'Резидент загружен!$'
    188	      E2 20 A7 A0 A3 E0	E3+
    189	      A6 A5 AD 21 24
    190	0362  90 A5 A7 A8 A4 A5	AD+	     alreadyInstalledMsg		     DB	 'Резидент уже загружен$'
    191	      E2 20 E3 A6 A5 20	A7+
    192	      A0 A3 E0 E3 A6 A5	AD+
    193	      24
    194	0378  8D A5 A4 AE E1 E2	A0+	     noMemMsg						     DB	 'Недостаточно памяти$'
    195	      E2 AE E7 AD AE 20	AF+
    196	      A0 AC EF E2 A8 24
    197	038C  8D A5 20 E3 A4 A0	AB+	     notInstalledMsg			     DB	 'Не удалось загрузить резидент$'
    198	      AE E1 EC 20 A7 A0	A3+
    199	      E0 E3 A7 A8 E2 EC	20+
    200	      E0 A5 A7 A8 A4 A5	AD+
    201	      E2 24
    202
    203	03AA  90 A5 A7 A8 A4 A5	AD+	     removedMsg					     DB	 'Резидент выгружен'
    204	      E2 20 A2 EB A3 E0	E3+
    205	      A6 A5 AD
    206	      =0011			     removedMsg_length				     equ     $-removedMsg
    207
    208	03BB  8D A5 20 E3 A4 A0	AB+	     noRemoveMsg				     DB	 'Не удалось выгрузить резидент'
    209	      AE E1 EC 20 A2 EB	A3+
    210	      E0 E3 A7 A8 E2 EC	20+
    211	      E0 A5 A7 A8 A4 A5	AD+
    212	      E2
    213	      =001D			     noRemoveMsg_length			     equ     $-noRemoveMsg
    214
    215	03D8  46 31			     f1_txt					     DB	     'F1'
    216	03DA  46 32			     f2_txt					     DB	     'F2'
    217	03DC  46 33			     f3_txt					     DB	     'F3'
    218	03DE  46 39			     f9_txt					     DB	     'F9'
    219	      =0002			     fx_length					     equ     $-f9_txt
    220					     ; Проверка	клавиш
    221	03E0				     changeFx proc
    222	03E0  50				     push AX
    223	03E1  53				     push BX
    224	03E2  51				     push CX
    225	03E3  52				     push DX
    226	03E4  55				     push BP
    227	03E5  06				     push ES
    228	03E6  33 DB				     xor BX, BX
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 5
tsr.asm



    229
    230	03E8  B4 03				     mov AH, 03h
    231	03EA  CD 10				     int 10h
    232	03EC  52				     push DX
    233
    234	03ED  0E				     push CS
    235	03EE  07				     pop ES
    236
    237	03EF				     _checkF1:
    238	03EF  BD 03D8r				     lea BP, f1_txt
    239	03F2  B9 0002				     mov CX, fx_length
    240	03F5  B7 00				     mov BH, 0
    241	03F7  B6 00				     mov DH, 0
    242	03F9  B2 4E				     mov DL, 78
    243	03FB  B8 1301				     mov AX, 1301h
    244
    245	03FE  80 3E 0144r FF			     cmp cursiveEnabled, true
    246	0403  74 07				     je	_greenF1
    247
    248	0405					     _redF1:
    249	0405  B3 4F					     mov BL, 01001111b ; red
    250	0407  CD 10					     int 10h
    251	0409  EB 08 90					     jmp _checkF2
    252
    253	040C					     _greenF1:
    254	040C  BD 03D8r					     lea BP, f1_txt
    255	040F  B3 2F					     mov BL, 00101111b ; green
    256	0411  CD 10					     int 10h
    257
    258	0413				     _checkF2:
    259	0413  BD 03DAr				     lea BP, f2_txt
    260	0416  B9 0002				     mov CX, fx_length
    261	0419  B7 00				     mov BH, 0
    262	041B  B6 01				     mov DH, 1
    263	041D  B2 4E				     mov DL, 78
    264	041F  B8 1301				     mov AX, 1301h
    265
    266	0422  80 3E 0142r FF			     cmp translateEnabled, true
    267	0427  74 07				     je	_greenF2
    268
    269	0429					     _redF2:
    270	0429  B3 4F					     mov BL, 01001111b ; red
    271	042B  CD 10					     int 10h
    272	042D  EB 05 90					     jmp _checkF3
    273
    274	0430					     _greenF2:
    275	0430  B3 2F					     mov BL, 00101111b ; green
    276	0432  CD 10					     int 10h
    277
    278	0434				     _checkF3:
    279	0434  BD 03DCr				     lea BP, f3_txt
    280	0437  B9 0002				     mov CX, fx_length
    281	043A  B7 00				     mov BH, 0
    282	043C  B6 02				     mov DH, 2
    283	043E  B2 4E				     mov DL, 78
    284	0440  B8 1301				     mov AX, 1301h
    285
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 6
tsr.asm



    286	0443  80 3E 0137r FF			     cmp ignoreEnabled,	true
    287	0448  74 07				     je	_greenF3
    288
    289	044A					     _redF3:
    290	044A  B3 4F					     mov BL, 01001111b ; red
    291	044C  CD 10					     int 10h
    292	044E  EB 05 90					     jmp _checkf9
    293
    294	0451					     _greenF3:
    295	0451  B3 2F					     mov BL, 00101111b ; green
    296	0453  CD 10					     int 10h
    297
    298	0455				     _checkf9:
    299	0455  BD 03DEr				     lea BP, f9_txt
    300	0458  B9 0002				     mov CX, fx_length
    301	045B  B7 00				     mov BH, 0
    302	045D  B6 03				     mov DH, 3
    303	045F  B2 4E				     mov DL, 78
    304	0461  B8 1301				     mov AX, 1301h
    305
    306	0464  80 3E 0143r FF			     cmp signaturePrintingEnabled, true
    307	0469  74 07				     je	_greenf9
    308
    309	046B					     _redf9:
    310	046B  B3 4F					     mov BL, 01001111b ; red
    311	046D  CD 10					     int 10h
    312	046F  EB 05 90					     jmp _outFx
    313
    314	0472					     _greenf9:
    315	0472  B3 2F					     mov BL, 00101111b ; green
    316	0474  CD 10					     int 10h
    317
    318	0476				     _outFx:
    319	0476  5A				     pop DX
    320	0477  B4 02				     mov AH, 02h
    321	0479  CD 10				     int 10h
    322
    323	047B  07				     pop ES
    324	047C  5D				     pop BP
    325	047D  5A				     pop DX
    326	047E  59				     pop CX
    327	047F  5B				     pop BX
    328	0480  58				     pop AX
    329	0481  C3				     ret
    330	0482				     changeFx endp
    331						     ; новый обработчик	 new_int9h
    332
    333					 ;новый	обработчик
    334	0482				 new_int9h proc	far
    335						     ; сохраняем значения всех,	изменяемых регистров в стэке
    336	0482  56				     push SI
    337	0483  50				     push AX
    338	0484  53				     push BX
    339	0485  51				     push CX
    340	0486  52				     push DX
    341	0487  06				     push ES
    342	0488  1E				     push DS
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 7
tsr.asm



    343						     ; синхронизируем CS и DS
    344	0489  0E				     push CS
    345	048A  1F				     pop     DS
    346
    347	048B  B8 0040				     mov     AX, 40h ; 40h-сегмент,где хранятся	флаги сост-я клавиатуры, кольц.	    +
    348				     буфер ввода
    349	048E  8E C0				     mov     ES, AX
    350	0490  E4 60				     in	     AL, 60h ; записываем в AL скан-код	нажатой	клавиши
    351
    352						     ;@	проверка на Ctrl+U, только для ИУ5-41
    353	0492  3C 16				     cmp     AL, 22  ; была нажата клавиша U?
    354	0494  75 24				     jne     _test_Fx
    355	0496  26: 8A 26	0017			     mov     AH, ES:[17h]     ;	флаги клавиатуры
    356	049B  80 E4 0F				     and     AH, 00001111b
    357	049E  80 FC 04				     cmp     AH, 00000100b   ; был ли нажат ctrl?
    358	04A1  75 17				     jne     _test_Fx
    359						     ; выгрузка
    360	04A3  B4 FF					     mov AH, 0FFh
    361	04A5  B0 01					     mov AL, 01h
    362	04A7  CD 2F					     int 2Fh
    363							     ; завершаем обработку нажатия
    364							     ; Работа с	портом в/в
    365
    366	04A9  E4 61					     in	     AL, 61h ;контроллер состояния клавиатуры
    367	04AB  0C 80					     or	     AL, 10000000b   ;пометим, что клавишу нажали
    368	04AD  E6 61					     out     61h, AL
    369	04AF  24 7F					     and     AL, 01111111b   ;пометим, что клавишу отпустили
    370	04B1  E6 61					     out     61h, AL
    371	04B3  B0 20					     mov     AL, 20h
    372	04B5  E6 20					     out     20h, AL ;отправим в контроллер прерываний признак конца	    +
    373				     прерывания
    374
    375							     ; выходим
    376	04B7  E9 009D					     jmp _quit
    377
    378
    379						     ;проверка F1-f9
    380	04BA					     _test_Fx:
    381	04BA  2C 3A				     sub AL, 58	; в AL теперь номер функциональной клавиши
    382	04BC					     _F9: ;signaturePrint
    383	04BC  3C 09					     cmp AL, 9 ; F9
    384	04BE  75 0A					     jne _F1
    385	04C0  F6 16 0143r				     not signaturePrintingEnabled
    386	04C4  E8 FF19					     call changeFx
    387	04C7  EB 2E 90					     jmp _translate_or_ignore
    388	04CA					     _F1: ;Cursive
    389	04CA  3C 01					     cmp AL, 1 ; F1
    390	04CC  75 0D					     jne _F2
    391	04CE  F6 16 0144r				     not cursiveEnabled
    392	04D2  E8 FF0B					     call changeFx
    393	04D5  E8 01F0					     call setCursive ; перевод символа в курсив	и обратно в зависимости	от  +
    394				     флага cursiveEnabled
    395	04D8  EB 1D 90					     jmp _translate_or_ignore
    396	04DB					     _F2: ;translate
    397	04DB  3C 02					     cmp AL, 2 ; F2
    398	04DD  75 0A					     jne _F3
    399	04DF  F6 16 0142r				     not translateEnabled
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 8
tsr.asm



    400	04E3  E8 FEFA					     call changeFx
    401	04E6  EB 0F 90					     jmp _translate_or_ignore
    402	04E9					     _F3: ;ignore
    403	04E9  3C 03					     cmp AL, 3 ; F3
    404	04EB  75 0A					     jne _translate_or_ignore
    405	04ED  F6 16 0137r				     not ignoreEnabled
    406	04F1  E8 FEEC					     call changeFx
    407	04F4  EB 01 90					     jmp _translate_or_ignore
    408
    409						     ;игнорирование и перевод
    410	04F7					     _translate_or_ignore:
    411
    412				     ; Вызов старого обработчика  old_int9hOffset
    413
    414	04F7  9C				     Pushf
    415
    416	04F8  2E: FF 1E	0166r			     call dword	ptr CS:[old_int9hOffset] ; вызываем стандартный	обработчик прерывания
    417	04FD  B8 0040				     mov     AX, 40h	     ; 40h-сегмент,где хранятся	флаги сост-я клавы,кольц.   +
    418				     буфер ввода
    419				     ; Работа с	клавиатурой
    420
    421	0500  8E C0				     mov     ES, AX
    422	0502  26: 8B 1E	001C			     mov     BX, ES:[1Ch]    ; адрес хвоста
    423	0507  4B				     dec     BX	     ; сместимся назад к последнему
    424	0508  4B				     dec     BX	     ; введённому символу
    425	0509  83 FB 1E				     cmp     BX, 1Eh ; не вышли	ли мы за пределы буфера?
    426	050C  73 03				     jae     _go
    427	050E  BB 003C				     mov     BX, 3Ch ; хвост вышел за пределы буфера, значит последний введённый    +
    428				     символ
    429									 ; находится в конце буфера
    430
    431	0511				     _go:
    432	0511  26: 8B 17				     mov DX, ES:[BX] ; в DX 0 введённый	символ
    433						     ;включен ли режим блокировки ввода?
    434	0514  80 3E 0137r FF			     cmp ignoreEnabled,	true
    435	0519  75 1A				     jne _check_translate
    436						     ; Блокировка ввода	символов
    437
    438						     ; да, включен
    439	051B  BE 0000				     mov SI, 0
    440	051E  B9 0034				     mov CX, ignoredLength ;кол-во игнорируемых	символов
    441
    442						     ; проверяем, присутствует ли текущий символ в списке игнорируемых
    443	0521				     _check_ignored:
    444	0521  3A 94 0103r			     cmp DL,ignoredChars[SI]
    445	0525  74 06				     je	_block
    446	0527  46				     inc SI
    447	0528  E2 F7			     loop _check_ignored
    448	052A  EB 09 90				     jmp _check_translate
    449
    450					     ; блокируем
    451	052D				     _block:
    452	052D  26: 89 1E	001C			     mov ES:[1Ch], BX ;блокировка ввода	символа
    453	0532  EB 23 90				     jmp _quit
    454							     ; Замена символов
    455
    456	0535				     _check_translate:
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 9
tsr.asm



    457						     ; включен ли режим	перевода?
    458	0535  80 3E 0142r FF			     cmp translateEnabled, true
    459	053A  75 1B				     jne _quit
    460
    461						     ; да, включен
    462	053C  BE 0000				     mov SI, 0
    463	053F  B9 0005				     mov CX, translateLength ; кол-во символов для перевода
    464						     ; проверяем, присутствует ли текущий символ в списке для перевода
    465	0542					     _check_translate_loop:
    466	0542  3A 94 0138r				     cmp DL, translateFrom[SI]
    467	0546  74 06					     je	_translate
    468	0548  46					     inc SI
    469	0549  E2 F7				     loop _check_translate_loop
    470	054B  EB 0A 90				     jmp _quit
    471
    472						     ; переводим
    473	054E					     _translate:
    474	054E  33 C0					     xor AX, AX
    475	0550  8A 84 013Dr				     mov AL, translateTo[SI]
    476	0554  26: 89 07					     mov ES:[BX], AX ; замена символа
    477
    478	0557				     _quit:
    479						     ; восстанавливаем все регистры
    480	0557  1F				     pop     DS
    481	0558  07				     pop     ES
    482	0559  5A				     pop DX
    483	055A  59				     pop CX
    484	055B  5B				     pop     BX
    485	055C  58				     pop     AX
    486	055D  5E				     pop SI
    487	055E  CF				     iret
    488	055F			     new_int9h endp
    489
    490				     ;=== Обработчик прерывания	int 1Ch	===;
    491				     ;=== Вызывается каждые 55 мс ===;
    492				     ; Новый обработчик	 new_int1Ch
    493
    494	055F			     new_int1Ch	proc far
    495	055F  50			     push AX
    496	0560  0E			     push CS
    497	0561  1F			     pop DS
    498				     ; Вызов старого обработчика  old_int1ChOffset
    499
    500	0562  9C			     pushf
    501	0563  2E: FF 1E	016Ar		     call dword	ptr CS:[old_int1ChOffset]
    502
    503	0568  80 3E 0143r FF		     cmp signaturePrintingEnabled, true	; если нажата управляющая клавиша (в данном случае  +
    504				     F1)
    505	056D  75 1D			     jne _notToPrint
    506
    507				     ; Контроль	счетчика циклов
    508
    509	056F  81 3E 0174r 0080			     cmp counter, printDelay*1000/55 + 1 ; если	кол-во "тактов"	эквивалентно	    +
    510				     %printDelay% секундам
    511	0575  74 03				     je	_letsPrint
    512
    513	0577  EB 0E 90				     jmp _dontPrint
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 10
tsr.asm



    514
    515	057A					     _letsPrint:
    516	057A  F6 16 0143r				     not signaturePrintingEnabled
    517	057E  C7 06 0174r 0000				     mov counter, 0
    518	0584  E8 0094					     call printSignature
    519
    520	0587					     _dontPrint:
    521	0587  83 06 0174r 01				     add counter, 1
    522
    523	058C				     _notToPrint:
    524
    525	058C  58			     pop AX
    526
    527	058D  CF			     iret
    528	058E			     new_int1Ch	endp
    529
    530				     ;=== Обработчик прерывания	int 2Fh	===;
    531				     ;=== Служит для:
    532				     ;===  1) проверки факта присутствия TSR в памяти (при AH=0FFh, AL=0)
    533				     ;===     будет возвращён AH='i' в случае, если TSR	уже загружен
    534				     ;===  2) выгрузки TSR из памяти (при AH=0FFh, AL=1)
    535				     ;===
    536				      ;	Новый обработчик  new_int2Fh
    537
    538	058E			     new_int2Fh	proc
    539	058E  80 FC FF			     cmp     AH, 0FFh	     ;наша функция?
    540	0591  75 0B			     jne     _2Fh_std	     ;нет - на старый обработчик
    541	0593  3C 00			     cmp     AL, 0   ;подфункция проверки, загружен ли резидент	в память?
    542	0595  74 0C			     je	     _already_installed
    543	0597  3C 01			     cmp     AL, 1   ;подфункция выгрузки из памяти?
    544	0599  74 0B			     je	     _uninstall
    545	059B  EB 01 90			     jmp     _2Fh_std	     ;нет - на старый обработчик
    546
    547	059E			     _2Fh_std:
    548				     ; Вызов старого обработчика  old_int2FhOffset
    549
    550	059E  2E: FF 2E	016Er		     jmp     dword ptr CS:[old_int2FhOffset] ;вызов старого обработчика
    551
    552	05A3			     _already_installed:
    553	05A3  B4 69				     mov     AH, 'i' ;вернём 'i', если резидент	загружен     в память
    554	05A5  CF				     iret
    555
    556	05A6			     _uninstall:
    557	05A6  1E			     push    DS
    558	05A7  06			     push    ES
    559	05A8  52			     push    DX
    560	05A9  53			     push    BX
    561
    562	05AA  33 DB			     xor BX, BX
    563
    564					     ; CS = ES,	для доступа к переменным
    565	05AC  0E			     push CS
    566	05AD  07			     pop ES
    567				     ; выгрузка	резидента
    568
    569	05AE  B8 2509			     mov     AX, 2509h
    570	05B1  26: 8B 16	0166r		     mov DX, ES:old_int9hOffset		; возвращаем вектор прерывания
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 11
tsr.asm



    571	05B6  26: 8E 1E	0168r		 mov DS, ES:old_int9hSegment	    ; на место
    572	05BB  CD 21			     int     21h
    573
    574	05BD  B8 251C			     mov     AX, 251Ch
    575	05C0  26: 8B 16	016Ar		     mov DX, ES:old_int1ChOffset	 ; возвращаем вектор прерывания
    576	05C5  26: 8E 1E	016Cr		 mov DS, ES:old_int1ChSegment	     ; на место
    577	05CA  CD 21			     int     21h
    578
    579	05CC  B8 252F			     mov     AX, 252Fh
    580	05CF  26: 8B 16	016Er		     mov DX, ES:old_int2FhOffset	 ; возвращаем вектор прерывания
    581	05D4  26: 8E 1E	0170r		 mov DS, ES:old_int2FhSegment	     ; на место
    582	05D9  CD 21			     int     21h
    583
    584	05DB  2E: 8E 06	002C		     mov     ES, CS:2Ch	     ; загрузим	в ES адрес окружения
    585	05E0  B4 49			     mov     AH, 49h	     ; выгрузим	из памяти окружение
    586	05E2  CD 21			     int     21h
    587	05E4  72 0B			     jc	_notRemove
    588
    589	05E6  0E			     push    CS
    590	05E7  07			     pop     ES	     ;в	ES - адрес резидентной программы
    591	05E8  B4 49			     mov     AH, 49h  ;выгрузим	из памяти резидент
    592	05EA  CD 21			     int     21h
    593	05EC  72 03			     jc	_notRemove
    594	05EE  EB 15 90			     jmp _unloaded
    595
    596	05F1			     _notRemove: ; не удалось выполнить	выгрузку
    597					 ; вывод сообщения о неудачной выгрузке
    598	05F1  B4 03			     mov AH, 03h				     ; получаем	позицию	курсора
    599	05F3  CD 10			     int 10h
    600	05F5  BD 03BBr			     lea BP, noRemoveMsg
    601	05F8  B9 001D			     mov CX, noRemoveMsg_length
    602	05FB  B3 07			     mov BL, 0111b
    603	05FD  B8 1301			     mov AX, 1301h
    604	0600  CD 10			     int 10h
    605	0602  EB 12 90			     jmp _2Fh_exit
    606
    607	0605			     _unloaded:	; выгрузка прошла успешно
    608					 ; вывод сообщения об удачной выгрузке
    609	0605  B4 03			     mov AH, 03h				     ; получаем	позицию	курсора
    610	0607  CD 10			     int 10h
    611	0609  BD 03AAr			     lea BP, removedMsg
    612	060C  B9 0011			     mov CX, removedMsg_length
    613	060F  B3 07			     mov BL, 0111b
    614	0611  B8 1301			     mov AX, 1301h
    615	0614  CD 10			     int 10h
    616
    617	0616			     _2Fh_exit:
    618	0616  5B			     pop BX
    619	0617  5A			     pop     DX
    620	0618  07			     pop     ES
    621	0619  1F			     pop     DS
    622	061A  CF			     iret
    623	061B			     new_int2Fh	endp
    624
    625				     ;=== Процедура вывода подписи (ФИО, группа)
    626				     ;=== Настраивается	значениями переменных в	начале исходника
    627				     ;===
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 12
tsr.asm



    628				     ; Вывод подписи
    629
    630	061B			     printSignature proc
    631	061B  50			     push AX
    632	061C  52			     push DX
    633	061D  51			     push CX
    634	061E  53			     push BX
    635	061F  06			     push ES
    636	0620  54			     push SP
    637	0621  55			     push BP
    638	0622  56			     push SI
    639	0623  57			     push DI
    640
    641	0624  33 C0			     xor AX, AX
    642	0626  33 DB			     xor BX, BX
    643	0628  33 D2			     xor DX, DX
    644
    645	062A  B4 03			     mov AH, 03h					     ;чтение текущей позиции курсора
    646	062C  CD 10			     int 10h
    647	062E  52			     push DX						     ;помещаем информацию о	    +
    648				     положении курсора в стек
    649
    650	062F  83 3E 0176r 00		     cmp printPos, 0
    651	0634  74 0E			     je	_printTop
    652
    653	0636  83 3E 0176r 01		     cmp printPos, 1
    654	063B  74 0E			     je	_printCenter
    655
    656	063D  83 3E 0176r 02		     cmp printPos, 2
    657	0642  74 0E			     je	_printBottom
    658
    659					     ;все числа	подобраны на глаз...
    660	0644				     _printTop:
    661	0644  B6 00				     mov DH, 0
    662	0646  B2 0F				     mov DL, 15
    663	0648  EB 0F 90				     jmp _actualPrint
    664
    665	064B				     _printCenter:
    666	064B  B6 09				     mov DH, 9
    667	064D  B2 1E				     mov DL, 30
    668	064F  EB 08 90				     jmp _actualPrint
    669
    670	0652				     _printBottom:
    671	0652  B6 13				     mov DH, 19
    672	0654  B2 0F				     mov DL, 15
    673	0656  EB 01 90				     jmp _actualPrint
    674
    675	0659				     _actualPrint:
    676	0659  B4 0F				     mov AH, 0Fh				     ;чтение текущего видеорежима. в+
    677				     BH	- текущая страница
    678	065B  CD 10				     int 10h
    679
    680	065D  0E				     push CS
    681	065E  07				     pop ES					     ;указываем	ES на CS
    682
    683						     ;вывод 'верхушки' таблицы
    684	065F  52				     push DX
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 13
tsr.asm



    685	0660  BD 0333r				     lea BP, tableTop				     ;помещаем в BP указатель на    +
    686				     выводимую строку
    687	0663  B9 000E				     mov CX, tableTop_length	     ;в	CX - длина строки
    688	0666  B3 07				     mov BL, 0111b			     ;цвет выводимого текста ref:	    +
    689				     http://en.wikipedia.org/wiki/BIOS_color_attributes
    690	0668  B8 1301				     mov AX, 1301h				     ;AH=13h - номер ф-ии, AL=01h - +
    691				     курсор перемещается при выводе каждого из символов	строки
    692	066B  CD 10				     int 10h
    693	066D  5A				     pop DX
    694	066E  FE C6				     inc DH
    695
    696
    697						     ;вывод первой линии
    698	0670  52				     push DX
    699	0671  BD 0178r				     lea BP, signatureLine1
    700	0674  B9 000E				     mov CX, Line1_length
    701	0677  B3 07				     mov BL, 0111b
    702	0679  B8 1301				     mov AX, 1301h
    703	067C  CD 10				     int 10h
    704	067E  5A				     pop DX
    705	067F  FE C6				     inc DH
    706
    707						     ;вывод второй линии
    708	0681  52				     push DX
    709	0682  BD 0186r				     lea BP, signatureLine2
    710	0685  B9 000E				     mov CX, Line2_length
    711	0688  B3 07				     mov BL, 0111b
    712	068A  B8 1301				     mov AX, 1301h
    713	068D  CD 10				     int 10h
    714	068F  5A				     pop DX
    715	0690  FE C6				     inc DH
    716
    717						     ;вывод третьей линии
    718	0692  52				     push DX
    719	0693  BD 0194r				     lea BP, signatureLine3
    720	0696  B9 000E				     mov CX, Line3_length
    721	0699  B3 07				     mov BL, 0111b
    722	069B  B8 1301				     mov AX, 1301h
    723	069E  CD 10				     int 10h
    724	06A0  5A				     pop DX
    725	06A1  FE C6				     inc DH
    726
    727						     ;вывод 'низа' таблицы
    728	06A3  52				     push DX
    729	06A4  BD 0341r				     lea BP, tableBottom
    730	06A7  B9 000E				     mov CX, tableBottom_length
    731	06AA  B3 07				     mov BL, 0111b
    732	06AC  B8 1301				     mov AX, 1301h
    733	06AF  CD 10				     int 10h
    734	06B1  5A				     pop DX
    735	06B2  FE C6				     inc DH
    736
    737	06B4  33 DB				     xor BX, BX
    738	06B6  5A				     pop DX					     ;восстанавливаем из стека	    +
    739				     прежнее положение курсора
    740	06B7  B4 02				     mov AH, 02h				     ;меняем положение курсора на   +
    741				     первоначальное
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 14
tsr.asm



    742	06B9  CD 10				     int 10h
    743	06BB  E8 FD22				     call changeFx
    744
    745	06BE  5F			     pop DI
    746	06BF  5E			     pop SI
    747	06C0  5D			     pop BP
    748	06C1  5C			     pop SP
    749	06C2  07			     pop ES
    750	06C3  5B			     pop BX
    751	06C4  59			     pop CX
    752	06C5  5A			     pop DX
    753	06C6  58			     pop AX
    754
    755	06C7  C3			     ret
    756	06C8			     printSignature endp
    757				     ; Смена  шрифта
    758
    759				     ;=== Функция, которая в зависимости от флага cursiveEnabled меняет	начертание символа с курсива+
    760				     на	обычное	и наоброт
    761				     ;=== Сама смена происходит	в процедуре changeFont,	а здесь	подготавливаются данные
    762	06C8			     setCursive	proc
    763	06C8  06			     push ES ; сохраняем регистры
    764	06C9  50			     push AX
    765	06CA  0E			     push CS
    766	06CB  07			     pop ES
    767
    768	06CC  80 3E 0144r FF		     cmp cursiveEnabled, true
    769	06D1  75 30			     jne _restoreSymbol
    770					     ; если флаг равен true, выполняем замену символа на курсивный вариант,
    771					     ; предварительно сохраняя старый символ в savedSymbol
    772
    773	06D3  E8 004C			     call saveFont
    774	06D6  8A 0E 0155r		     mov CL, charToCursiveIndex
    775	06DA			     _shifTtable:
    776					     ; мы получаем в BP	таблицу	всех символов. адрес указывает на символ 0
    777					     ; поэтому нуэно совершить сдвиг 16*X - где	X - код	символа
    778	06DA  83 C5 10			     add BP, 16
    779	06DD  E2 FB			     loop _shiftTable
    780
    781					     ; пpи savefont смещается pегистp ES
    782					     ; поэтомy пpиходится делать такие махинации, чтобы
    783					     ; записать	полyченный элемент в savedSymbol
    784					     ; swap(ES,	DS) и сохранение старого значения DS
    785	06DF  1E			     push DS
    786	06E0  58			     pop AX
    787	06E1  06			     push ES
    788	06E2  1F			     pop DS
    789	06E3  50			     push AX
    790	06E4  07			     pop ES
    791	06E5  50			     push AX
    792
    793	06E6  8B F5			     mov SI, BP
    794	06E8  BF 0156r			     lea DI, savedSymbol
    795					     ; сохpаняем в пеpеменнyю savedSymbol
    796					     ; таблицy нyжного символа
    797	06EB  B9 0010			     mov CX, 16
    798					     ; movsb из	DS:SI в	ES:DI
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 15
tsr.asm



    799	06EE  F3> A4			     rep movsb
    800					     ; исходные	позиции	сегментов возвpащены
    801	06F0  1F			     pop DS ; восстановление DS
    802
    803					     ; заменим написание символа на кypсив
    804	06F1  B9 0001			     mov CX, 1
    805	06F4  B6 00			     mov DH, 0
    806	06F6  8A 16 0155r		     mov DL, charToCursiveIndex
    807	06FA  BD 0145r			     lea BP, cursiveSymbol
    808	06FD  E8 0015			     call changeFont
    809	0700  EB 10 90			     jmp _exitSetCursive
    810				     ; Восстановление  шрифта
    811
    812	0703			     _restoreSymbol:
    813					     ; если флаг равен 0, выполняем замену курсивного символа на старый	вариант
    814
    815	0703  B9 0001			     mov CX, 1
    816	0706  B6 00			     mov DH, 0
    817	0708  8A 16 0155r		     mov DL, charToCursiveIndex
    818	070C  BD 0156r			     lea bp, savedSymbol
    819	070F  E8 0003			     call changeFont
    820
    821	0712			     _exitSetCursive:
    822	0712  58			     pop AX
    823	0713  07			     pop ES
    824	0714  C3			     ret
    825	0715			     setCursive	endp
    826
    827				     ;=== Функция смены	начертания символа (курсив/нормальное)
    828				     ;===
    829				     ; *** входные данные
    830				     ; DL = номер символа для замены
    831				     ; CX = Кол-во символов заменяемых изображений символов
    832				     ; (начиная	с символа указанного в DX)
    833				     ; ES:bp = адрес таблицы
    834				     ;
    835				     ; *** описание работы процедуры
    836				     ; Происходит вызов	int 10h	(видеосервис)
    837				     ; с функцией AH = 11h (функции знакогенератора)
    838				     ; Параметр	AL = 0 сообщает, что будет заменено изображение
    839				     ; символа для текущего шрифта
    840				     ; В случаях, когда	AL = 1 или 2, будет заменено изображение
    841				     ; только для опредленного шрифта (8x14 и 8x8 соответственно)
    842				     ; Параметр	BH = 0Eh сообщает, что на опредление каждого изображения символа
    843				     ; расходуется по 14 байт (режим 8x14 бит как раз 14 байт)
    844				     ; Параметр	BL = 0 - блок шрифта для загрузки (от 0	до 4)
    845				     ;
    846				     ; *** результат
    847				     ; изображение указанного(ых) символа(ов) будет заменено
    848				     ; на предложенное пользователем.
    849				     ; Изменению подвергнутся все символы, находящиеся на экране,
    850				     ; то есть если изображение	заменено, старый вариант нигде уже не проявится
    851
    852	0715			     changeFont	proc
    853	0715  50			     push AX
    854	0716  53			     push BX
    855	0717  B8 1100			     mov AX, 1100h
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 16
tsr.asm



    856	071A  BB 1000			     mov BX, 1000h
    857	071D  CD 10			     int 10h
    858	071F  58			     pop AX
    859	0720  5B			     pop BX
    860	0721  C3			     ret
    861	0722			     changeFont	endp
    862
    863				     ;=== Функция сохранения нормального начертания символа
    864				     ;===
    865				     ; *** входные данные
    866				     ; BH - тип	возвращаемой символьной	таблицы
    867				     ;	 0 - таблица из	int 1fh
    868				     ;	 1 - таблица из	int 44h
    869				     ;	 2-5 - таблица из 8x14,	8x8, 8x8 (top),	9x14
    870				     ;	 6 - 8x16
    871				     ;
    872				     ; *** описание работы процедуры
    873				     ; Происходит вызов	int 10h	(видеосервис)
    874				     ; с функцией AH = 11h (функции знакогенератора)
    875				     ; Параметр	AL = 30	- подфункция получения информации о EGA
    876				     ;
    877				     ; *** результат
    878				     ; в ES:BP находится таблица символов (полная)
    879				     ; в CX находится байт на символ
    880				     ; в DL количество экранных	строк
    881				     ; ВАЖНО! Происходит сдвиг регистра	ES
    882				     ; ( ES становится равным C000h )
    883
    884	0722			     saveFont proc
    885	0722  50			     push AX
    886	0723  53			     push BX
    887	0724  B8 1130			     mov AX, 1130h
    888	0727  BB 0600			     mov BX, 0600h
    889	072A  CD 10			     int 10h
    890	072C  58			     pop AX
    891	072D  5B			     pop BX
    892	072E  C3			     ret
    893	072F			     saveFont endp
    894
    895
    896				     ;=== Отсюда начинается выполнение основной	части программы	===;
    897				     ;===
    898				     ; Часть Инициализации
    899
    900	072F			     _initTSR:				     ; старт резидента
    901	072F  B4 03			     mov AH, 03h
    902	0731  CD 10			     int 10h
    903	0733  52			     push DX
    904	0734  B4 00			     mov AH,00h					     ; установка видеорежима (83h  текст    +
    905				     80x25  16/8  CGA,EGA  b800	 Comp,RGB,Enhanced), без очистки экрана
    906	0736  B0 83			     mov AL,83h
    907	0738  CD 10			     int 10h
    908	073A  5A			     pop DX
    909	073B  B4 02			     mov AH, 02h
    910	073D  CD 10			     int 10h
    911
    912				     ; Новые вектора Инициализации
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 17
tsr.asm



    913
    914	073F  E8 00B3			 call commandParamsParser
    915	0742  B8 3509			     mov AX,3509h		     ; получить	в ES:BX	вектор 09
    916	0745  CD 21			 int 21h			 ; прерывания
    917
    918					     ;@	=== Удаление резидента из памяти ===
    919	0747  80 3E 0172r FF		     cmp unloadTSR, true
    920	074C  74 03			     je	_removingOnParameter
    921	074E  EB 15 90			     jmp _notRemovingNow
    922				     ; Проверка	загрузки
    923
    924	0751				     _removingOnParameter:
    925	0751  B4 FF				     mov AH, 0FFh
    926	0753  B0 00				     mov AL, 0
    927	0755  CD 2F				     int 2Fh
    928	0757  80 FC 69				     cmp AH, 'i'  ; проверка того, загружена ли	уже программа
    929	075A  74 7D				     je	_remove
    930	075C  B4 09				     mov AH, 09h
    931	075E  BA 038Cr				     lea DX, notInstalledMsg
    932	0761  CD 21				     int 21h
    933	0763  CD 20				     int 20h
    934
    935	0765				     _notRemovingNow:
    936
    937	0765  80 3E 0173r FF		     cmp notLoadTSR, true		     ; если была выведена справка
    938	076A  74 0E			     je	_exit_tmp					     ; просто выходим
    939
    940
    941					     ;@	если необходимо	выгружать по параметру коммандной строки, то оставляем их
    942	076C  B4 FF			     mov AH, 0FFh
    943	076E  B0 00			     mov AL, 0
    944	0770  CD 2F			     int 2Fh
    945	0772  80 FC 69			     cmp AH, 'i'  ; проверка того, загружена ли	уже программа
    946	0775  74 6B			     je	_alreadyInstalled
    947
    948	0777  EB 04 90			     jmp _tmp
    949
    950	077A				     _exit_tmp:
    951	077A  EB 77 90				     jmp _exit
    952
    953	077D				     _tmp:
    954	077D  06			     push ES
    955				     ; Проверка	наличия	памяти
    956
    957	077E  A1 002C			 mov AX, DS:[2Ch]		 ; psp
    958	0781  8E C0			 mov ES, AX
    959	0783  B4 49			 mov AH, 49h			 ; хватит памяти чтоб остаться
    960	0785  CD 21			 int 21h			 ; резидентом?
    961	0787  07			 pop ES
    962	0788  72 62			 jc _notMem			 ; не хватило ?	выходим
    963				     ; Сохранение старых векторов и установка новых
    964
    965
    966					     ;== int 09h ==;
    967
    968	078A  2E: 89 1E	0166r		     mov     word ptr CS:old_int9hOffset, BX
    969	078F  2E: 8C 06	0168r		     mov     word ptr CS:old_int9hSegment, ES
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 18
tsr.asm



    970	0794  B8 2509			 mov AX, 2509h			 ; установим вектор на 09
    971	0797  BA 0482r			 mov DX, offset	new_int9h	     ; прерывание
    972	079A  CD 21			 int 21h
    973
    974					     ;== int 1Ch ==;
    975	079C  B8 351C			     mov AX,351Ch		     ; получить	в ES:BX	вектор 1C
    976	079F  CD 21			 int 21h			 ; прерывания
    977	07A1  2E: 89 1E	016Ar		     mov     word ptr CS:old_int1ChOffset, BX
    978	07A6  2E: 8C 06	016Cr		     mov     word ptr CS:old_int1ChSegment, ES
    979	07AB  B8 251C			     mov AX, 251Ch		     ; установим вектор	на 1C
    980	07AE  BA 055Fr			     mov DX, offset new_int1Ch		  ; прерывание
    981	07B1  CD 21			     int 21h
    982
    983					     ;== int 2Fh ==;
    984	07B3  B8 352F			     mov AX,352Fh		     ; получить	в ES:BX	вектор 1C
    985	07B6  CD 21			 int 21h			 ; прерывания
    986	07B8  2E: 89 1E	016Er		     mov     word ptr CS:old_int2FhOffset, BX
    987	07BD  2E: 8C 06	0170r		     mov     word ptr CS:old_int2FhSegment, ES
    988	07C2  B8 252F			     mov AX, 252Fh		     ; установим вектор	на 2F
    989	07C5  BA 058Er			     mov DX, offset new_int2Fh		  ; прерывание
    990	07C8  CD 21			     int 21h
    991
    992	07CA  E8 FC13			     call changeFx
    993	07CD  BA 034Fr			 mov DX, offset	installedMsg	     ; выводим что все ок
    994	07D0  B4 09			 mov AH, 9
    995	07D2  CD 21			 int 21h
    996				     ; Оставить	в ОП резидентом	(027H)
    997
    998	07D4  BA 072Fr			 mov DX, offset	_initTSR       ; остаемся в памяти резидентом
    999	07D7  CD 27			 int 27h			 ; и выходим
   1000					 ; конец основной программы
   1001				     ; Выгрузка	резидента (сигнал в TSR)
   1002
   1003	07D9			     _remove: ;	выгрузка программы из памяти
   1004	07D9  B4 FF			     mov AH, 0FFh
   1005	07DB  B0 01			     mov AL, 1
   1006	07DD  CD 2F			     int 2Fh
   1007	07DF  EB 12 90			     jmp _exit
   1008	07E2			     _alreadyInstalled:
   1009	07E2  B4 09			     mov AH, 09h
   1010	07E4  BA 0362r			     lea DX, alreadyInstalledMsg
   1011	07E7  CD 21			     int 21h
   1012	07E9  EB 08 90			     jmp _exit
   1013	07EC			     _notMem:				 ; не хватает памяти, чтобы остаться резидентом
   1014	07EC  BA 0378r			 mov DX, offset	noMemMsg
   1015	07EF  B4 09			 mov AH, 9
   1016	07F1  CD 21			 int 21h
   1017	07F3			     _exit:				  ; выход
   1018	07F3  CD 20			 int 20h
   1019
   1020				     ;=== Процедура проверки параметров	ком. строки ===;
   1021				     ;===
   1022				     ; Проверка	и разбор параметров
   1023
   1024	07F5			     commandParamsParser proc
   1025	07F5  0E			     push CS
   1026	07F6  07			     pop ES
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 19
tsr.asm



   1027	07F7  C6 06 0172r 00		     mov unloadTSR, 0
   1028	07FC  C6 06 0173r 00		     mov notLoadTSR, 0
   1029
   1030	0801  BE 0080			     mov SI, 80h			     ;SI=смещение командной строки.
   1031	0804  AC			     lodsb					     ;Получим кол-во символов.
   1032	0805  0A C0			     or	AL, AL				     ;Если 0 символов введено,
   1033	0807  74 3F			     jz	_exitHelp			     ;то все в порядке.
   1034
   1035	0809				     _nextChar:
   1036
   1037	0809  46			     inc SI					     ;Теперь SI	указывает на первый символ  +
   1038				     строки.
   1039
   1040	080A  80 3C 0D			     cmp [SI], BYTE ptr	13
   1041	080D  74 39			     je	_exitHelp
   1042
   1043
   1044	080F  AD				     lodsw				     ;Получаем два символа
   1045	0810  3D 3F2F				     cmp AX, '?/'			     ;Это '/?' (данные расположены в	    +
   1046				     обратном порядк, т.е. AL:AH вместо	AH:AL)
   1047	0813  74 08				     je	_question
   1048	0815  3D 752F				     cmp AX, 'u/'
   1049	0818  74 1A				     je	_finishTSR
   1050	081A  EB 2C 90				     jmp _exitHelp
   1051				     ; Вывод справки
   1052
   1053
   1054	081D				     _question:
   1055						     ; вывод строки помощи
   1056	081D  B4 03					     mov AH,03
   1057	081F  CD 10					     int 10h
   1058	0821  BD 01A2r					     lea BP, helpMsg
   1059	0824  B9 016C					     mov CX, helpMsg_length
   1060	0827  B3 07					     mov BL, 0111b
   1061	0829  B8 1301					     mov AX, 1301h
   1062	082C  CD 10					     int 10h
   1063						     ; конец вывода строки помощи
   1064	082E  F6 16 0173r			     not notLoadTSR	     ;флаг того, что необходимо	не загружать резидент
   1065	0832  EB D5				     jmp _nextChar
   1066
   1067					     ;@	=== Удаление резидента из памяти ===
   1068					     ;@	Если по	варианту необходимо выгружать резидент по параметру '/u' коммандной строки,
   1069					     ;@	нужно использовать следующий код, в остальных случаях необходимо закомменитровать
   1070					     ;@	этот код, кроме	названия метки!	(по желанию можно избавиться и от метки, но	    +
   1071				     аккуратно просмотреть использование)
   1072	0834				     _finishTSR:
   1073						     ;not unloadTSR		   ;флаг того, что необходимо выгузить резидент
   1074						     ;jmp _nextChar
   1075
   1076	0834  EB 12 90			     jmp _exitHelp
   1077
   1078	0837				     _errorParam:
   1079						     ;вывод строки
   1080	0837  B4 03					     mov AH,03
   1081	0839  CD 10					     int 10h
   1082	083B  BD 030Er					     lea BP, CS:errorParamMsg
   1083	083E  B9 0025					     mov CX, errorParamMsg_length
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 20
tsr.asm



   1084	0841  B3 07					     mov BL, 0111b
   1085	0843  B8 1301					     mov AX, 1301h
   1086	0846  CD 10					     int 10h
   1087						     ;конец вывода строки
   1088	0848				     _exitHelp:
   1089	0848  C3			     ret
   1090	0849			     commandParamsParser endp
   1091
   1092	0849			     code ends
   1093
   1094				     end _start
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 21
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "05/07/24"
??FILENAME			  Text	 "tsr	  "
??TIME				  Text	 "16:21:07"
??VERSION			  Number 030A
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 TSR
@WORDSIZE			  Text	 2
ALREADYINSTALLEDMSG		  Byte	 CODE:0362
CHANGEFONT			  Near	 CODE:0715
CHANGEFX			  Near	 CODE:03E0
CHARTOCURSIVEINDEX		  Byte	 CODE:0155
COMMANDPARAMSPARSER		  Near	 CODE:07F5
COUNTER				  Word	 CODE:0174
CURSIVEENABLED			  Byte	 CODE:0144
CURSIVESYMBOL			  Byte	 CODE:0145
ERRORPARAMMSG			  Byte	 CODE:030E
ERRORPARAMMSG_LENGTH		  Number 0025
F1_TXT				  Byte	 CODE:03D8
F2_TXT				  Byte	 CODE:03DA
F3_TXT				  Byte	 CODE:03DC
F9_TXT				  Byte	 CODE:03DE
FX_LENGTH			  Number 0002
HELPMSG				  Byte	 CODE:01A2
HELPMSG_LENGTH			  Number 016C
IGNOREDCHARS			  Byte	 CODE:0103
IGNOREDLENGTH			  Number 0034
IGNOREENABLED			  Byte	 CODE:0137
INSTALLEDMSG			  Byte	 CODE:034F
LINE1_LENGTH			  Number 000E
LINE2_LENGTH			  Number 000E
LINE3_LENGTH			  Number 000E
NEW_INT1CH			  Far	 CODE:055F
NEW_INT2FH			  Near	 CODE:058E
NEW_INT9H			  Far	 CODE:0482
NOMEMMSG			  Byte	 CODE:0378
NOREMOVEMSG			  Byte	 CODE:03BB
NOREMOVEMSG_LENGTH		  Number 001D
NOTINSTALLEDMSG			  Byte	 CODE:038C
NOTLOADTSR			  Byte	 CODE:0173
OLD_INT1CHOFFSET		  Word	 CODE:016A
OLD_INT1CHSEGMENT		  Word	 CODE:016C
OLD_INT2FHOFFSET		  Word	 CODE:016E
OLD_INT2FHSEGMENT		  Word	 CODE:0170
OLD_INT9HOFFSET			  Word	 CODE:0166
OLD_INT9HSEGMENT		  Word	 CODE:0168
PRINTDELAY			  Number 0007
PRINTPOS			  Word	 CODE:0176
PRINTSIGNATURE			  Near	 CODE:061B
REMOVEDMSG			  Byte	 CODE:03AA
REMOVEDMSG_LENGTH		  Number 0011
SAVEDSYMBOL			  Byte	 CODE:0156
SAVEFONT			  Near	 CODE:0722
SETCURSIVE			  Near	 CODE:06C8
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 22
Symbol Table



SIGNATURELINE1			  Byte	 CODE:0178
SIGNATURELINE2			  Byte	 CODE:0186
SIGNATURELINE3			  Byte	 CODE:0194
SIGNATUREPRINTINGENABLED	  Byte	 CODE:0143
TABLEBOTTOM			  Byte	 CODE:0341
TABLEBOTTOM_LENGTH		  Number 000E
TABLETOP			  Byte	 CODE:0333
TABLETOP_LENGTH			  Number 000E
TRANSLATEENABLED		  Byte	 CODE:0142
TRANSLATEFROM			  Byte	 CODE:0138
TRANSLATELENGTH			  Number 0005
TRANSLATETO			  Byte	 CODE:013D
TRUE				  Number 00FF
UNLOADTSR			  Byte	 CODE:0172
_2FH_EXIT			  Near	 CODE:0616
_2FH_STD			  Near	 CODE:059E
_ACTUALPRINT			  Near	 CODE:0659
_ALREADYINSTALLED		  Near	 CODE:07E2
_ALREADY_INSTALLED		  Near	 CODE:05A3
_BLOCK				  Near	 CODE:052D
_CHECKF1			  Near	 CODE:03EF
_CHECKF2			  Near	 CODE:0413
_CHECKF3			  Near	 CODE:0434
_CHECKF9			  Near	 CODE:0455
_CHECK_IGNORED			  Near	 CODE:0521
_CHECK_TRANSLATE		  Near	 CODE:0535
_CHECK_TRANSLATE_LOOP		  Near	 CODE:0542
_DONTPRINT			  Near	 CODE:0587
_ERRORPARAM			  Near	 CODE:0837
_EXIT				  Near	 CODE:07F3
_EXITHELP			  Near	 CODE:0848
_EXITSETCURSIVE			  Near	 CODE:0712
_EXIT_TMP			  Near	 CODE:077A
_F1				  Near	 CODE:04CA
_F2				  Near	 CODE:04DB
_F3				  Near	 CODE:04E9
_F9				  Near	 CODE:04BC
_FINISHTSR			  Near	 CODE:0834
_GO				  Near	 CODE:0511
_GREENF1			  Near	 CODE:040C
_GREENF2			  Near	 CODE:0430
_GREENF3			  Near	 CODE:0451
_GREENF9			  Near	 CODE:0472
_INITTSR			  Near	 CODE:072F
_LETSPRINT			  Near	 CODE:057A
_NEXTCHAR			  Near	 CODE:0809
_NOTMEM				  Near	 CODE:07EC
_NOTREMOVE			  Near	 CODE:05F1
_NOTREMOVINGNOW			  Near	 CODE:0765
_NOTTOPRINT			  Near	 CODE:058C
_OUTFX				  Near	 CODE:0476
_PRINTBOTTOM			  Near	 CODE:0652
_PRINTCENTER			  Near	 CODE:064B
_PRINTTOP			  Near	 CODE:0644
_QUESTION			  Near	 CODE:081D
_QUIT				  Near	 CODE:0557
_REDF1				  Near	 CODE:0405
Turbo Assembler	 Version 3.1	    05/07/24 16:21:07	    Page 23
Symbol Table



_REDF2				  Near	 CODE:0429
_REDF3				  Near	 CODE:044A
_REDF9				  Near	 CODE:046B
_REMOVE				  Near	 CODE:07D9
_REMOVINGONPARAMETER		  Near	 CODE:0751
_RESTORESYMBOL			  Near	 CODE:0703
_SHIFTTABLE			  Near	 CODE:06DA
_START				  Near	 CODE:0100
_TEST_FX			  Near	 CODE:04BA
_TMP				  Near	 CODE:077D
_TRANSLATE			  Near	 CODE:054E
_TRANSLATE_OR_IGNORE		  Near	 CODE:04F7
_UNINSTALL			  Near	 CODE:05A6
_UNLOADED			  Near	 CODE:0605

Groups & Segments		  Bit Size Align  Combine Class

CODE				  16  0849 Para	  none	  CODE
